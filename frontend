++import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.table.DefaultTableModel;
import java.io.*;

public class ExpenseTrackerUI {
    public static void main(String[] args) {
        // Create Frame
        JFrame frame = new JFrame("Expense Tracker");
        frame.setSize(650, 450);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        // **Set Light Blue Background**
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(new Color(173, 216, 230)); // Light Blue
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8); // Increase spacing

        // Create Labels & TextFields
        JLabel amountLabel = new JLabel("Amount:");
        JTextField amountField = new JTextField(15);

        JLabel categoryLabel = new JLabel("Category:");
        JTextField categoryField = new JTextField(15);

        JLabel dateLabel = new JLabel("Date:");
        JTextField dateField = new JTextField(15);

        JLabel descLabel = new JLabel("Description:");
        JTextField descField = new JTextField(15);

        // Create Buttons (Bigger Font)
        JButton addButton = new JButton("‚ûï Add Expense");
        JButton deleteButton = new JButton("‚ùå Delete Expense");
        JButton saveButton = new JButton("üíæ Save to File");
        JButton loadButton = new JButton("üìÇ Load from File");

        Font buttonFont = new Font("Arial", Font.BOLD, 12);
        addButton.setFont(buttonFont);
        deleteButton.setFont(buttonFont);
        saveButton.setFont(buttonFont);
        loadButton.setFont(buttonFont);

        // Table Model for Expense Records
        String[] columnNames = {"Amount", "Category", "Date", "Description"};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
        JTable table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);

        // Layout Grid
        gbc.gridx = 0; gbc.gridy = 0;
        panel.add(amountLabel, gbc);
        gbc.gridx = 1;
        panel.add(amountField, gbc);

        gbc.gridx = 0; gbc.gridy = 1;
        panel.add(categoryLabel, gbc);
        gbc.gridx = 1;
        panel.add(categoryField, gbc);

        gbc.gridx = 0; gbc.gridy = 2;
        panel.add(dateLabel, gbc);
        gbc.gridx = 1;
        panel.add(dateField, gbc);

        gbc.gridx = 0; gbc.gridy = 3;
        panel.add(descLabel, gbc);
        gbc.gridx = 1;
        panel.add(descField, gbc);

        // Buttons in a single row
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2; 
        gbc.fill = GridBagConstraints.HORIZONTAL;
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(addButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(saveButton);
        buttonPanel.add(loadButton);
        panel.add(buttonPanel, gbc);

        // Add Expense Button Functionality
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String amount = amountField.getText();
                String category = categoryField.getText();
                String date = dateField.getText();
                String description = descField.getText();

                if (amount.isEmpty() || category.isEmpty() || date.isEmpty() || description.isEmpty()) {
                    JOptionPane.showMessageDialog(frame, "Please fill all fields!", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    String[] expenseData = {amount, category, date, description};
                    tableModel.addRow(expenseData);

                    amountField.setText("");
                    categoryField.setText("");
                    dateField.setText("");
                    descField.setText("");
                }
            }
        });

        // Delete Expense Button Functionality
        deleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = table.getSelectedRow();

                if (selectedRow != -1) {
                    tableModel.removeRow(selectedRow);
                } else {
                    JOptionPane.showMessageDialog(frame, "Please select an expense to delete!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        // Save to File Button Functionality
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    FileWriter writer = new FileWriter("expenses.txt");
                    BufferedWriter bufferedWriter = new BufferedWriter(writer);

                    for (int i = 0; i < tableModel.getRowCount(); i++) {
                        for (int j = 0; j < tableModel.getColumnCount(); j++) {
                            bufferedWriter.write(tableModel.getValueAt(i, j) + "\t");
                        }
                        bufferedWriter.newLine();
                    }

                    bufferedWriter.close();
                    JOptionPane.showMessageDialog(frame, "Expenses saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(frame, "Error saving expenses!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        // Load from File Button Functionality
        loadButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    FileReader reader = new FileReader("expenses.txt");
                    BufferedReader bufferedReader = new BufferedReader(reader);

                    tableModel.setRowCount(0); 

                    String line;
                    while ((line = bufferedReader.readLine()) != null) {
                        String[] data = line.split("\t");
                        tableModel.addRow(data);
                    }

                    bufferedReader.close();
                    JOptionPane.showMessageDialog(frame, "Expenses loaded successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(frame, "Error loading expenses!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        // Add Panel & Table to Frame
        frame.add(panel, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);

        // Make Frame Visible
        frame.setVisible(true);
    }
}
